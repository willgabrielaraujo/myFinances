{"ast":null,"code":"import ApiService from \"../ApiService\";\nimport ValidationException from \"../exception/ValidationException\";\n\nclass EntryService extends ApiService {\n  constructor() {\n    super(\"/api/entries\");\n  }\n\n  filter(entry) {\n    let filters = `?user=${entry.user}&year=${entry.year}`;\n\n    if (entry.month) {\n      filters = `${this.filter}&month=${entry.month}`;\n    }\n\n    if (entry.type) {\n      filters = `${filters}&type=${entry.type}`;\n    }\n\n    if (entry.status) {\n      filters = `${filters}&status=${entry.status}`;\n    }\n\n    if (entry.description) {\n      filters = `${filters}&description=${entry.description}`;\n    }\n\n    return this.get(filters);\n  }\n\n  find(id) {\n    return this.get(`/${id}`);\n  }\n\n  save(entry) {\n    return this.post(\"/\", entry);\n  }\n\n  update(entry) {\n    return this.put(`/${entry.id}`, entry);\n  }\n\n  deleteEntry(id) {\n    return this.delete(`/${id}`);\n  }\n\n  updateStatus(id, status) {\n    return this.put(`/${id}/update-status`, {\n      status\n    });\n  }\n\n  validate(entry) {\n    const erros = [];\n\n    if (!entry.description) {\n      erros.push(\"Description is required\");\n    }\n\n    if (!entry.year) {\n      erros.push(\"Year is required\");\n    }\n\n    if (!entry.month) {\n      erros.push(\"Month is required\");\n    }\n\n    if (!entry.amount) {\n      erros.push(\"Amount is required\");\n    }\n\n    if (!entry.type) {\n      erros.push(\"Type is required\");\n    }\n\n    if (erros && erros.length > 0) {\n      throw new ValidationException(erros);\n    }\n  }\n\n  getMonthList() {\n    return [{\n      label: \"Choose...\",\n      value: \"\"\n    }, {\n      label: \"January\",\n      value: 1\n    }, {\n      label: \"February\",\n      value: 2\n    }, {\n      label: \"March\",\n      value: 3\n    }, {\n      label: \"April\",\n      value: 4\n    }, {\n      label: \"May\",\n      value: 5\n    }, {\n      label: \"June\",\n      value: 6\n    }, {\n      label: \"July\",\n      value: 7\n    }, {\n      label: \"August\",\n      value: 8\n    }, {\n      label: \"September\",\n      value: 9\n    }, {\n      label: \"October\",\n      value: 10\n    }, {\n      label: \"November\",\n      value: 11\n    }, {\n      label: \"December\",\n      value: 12\n    }];\n  }\n\n  getTypeList() {\n    return [{\n      label: \"Choose...\",\n      value: \"\"\n    }, {\n      label: \"Revenue\",\n      value: \"REVENUE\"\n    }, {\n      label: \"Expense\",\n      value: \"EXPENSE\"\n    }];\n  }\n\n}\n\nexport default EntryService;","map":{"version":3,"sources":["/Users/gabrielaraujo/Dev/workspace/web/minhas-financas-app/src/app/services/EntryService.js"],"names":["ApiService","ValidationException","EntryService","constructor","filter","entry","filters","user","year","month","type","status","description","get","find","id","save","post","update","put","deleteEntry","delete","updateStatus","validate","erros","push","amount","length","getMonthList","label","value","getTypeList"],"mappings":"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","sourcesContent":["import ApiService from \"../ApiService\";\nimport ValidationException from \"../exception/ValidationException\";\n\nclass EntryService extends ApiService {\n\tconstructor() {\n\t\tsuper(\"/api/entries\");\n\t}\n\n\tfilter(entry) {\n\t\tlet filters = `?user=${entry.user}&year=${entry.year}`;\n\n\t\tif (entry.month) {\n\t\t\tfilters = `${this.filter}&month=${entry.month}`;\n\t\t}\n\n\t\tif (entry.type) {\n\t\t\tfilters = `${filters}&type=${entry.type}`;\n\t\t}\n\n\t\tif (entry.status) {\n\t\t\tfilters = `${filters}&status=${entry.status}`;\n\t\t}\n\n\t\tif (entry.description) {\n\t\t\tfilters = `${filters}&description=${entry.description}`;\n\t\t}\n\n\t\treturn this.get(filters);\n\t}\n\n\tfind(id) {\n\t\treturn this.get(`/${id}`);\n\t}\n\n\tsave(entry) {\n\t\treturn this.post(\"/\", entry);\n\t}\n\n\tupdate(entry) {\n\t\treturn this.put(`/${entry.id}`, entry);\n\t}\n\n\tdeleteEntry(id) {\n\t\treturn this.delete(`/${id}`);\n\t}\n\n\tupdateStatus(id, status) {\n\t\treturn this.put(`/${id}/update-status`, { status });\n\t}\n\n\tvalidate(entry) {\n\t\tconst erros = [];\n\n\t\tif (!entry.description) {\n\t\t\terros.push(\"Description is required\");\n\t\t}\n\n\t\tif (!entry.year) {\n\t\t\terros.push(\"Year is required\");\n\t\t}\n\n\t\tif (!entry.month) {\n\t\t\terros.push(\"Month is required\");\n\t\t}\n\n\t\tif (!entry.amount) {\n\t\t\terros.push(\"Amount is required\");\n\t\t}\n\n\t\tif (!entry.type) {\n\t\t\terros.push(\"Type is required\");\n\t\t}\n\n\t\tif (erros && erros.length > 0) {\n\t\t\tthrow new ValidationException(erros);\n\t\t}\n\t}\n\n\tgetMonthList() {\n\t\treturn [\n\t\t\t{ label: \"Choose...\", value: \"\" },\n\t\t\t{ label: \"January\", value: 1 },\n\t\t\t{ label: \"February\", value: 2 },\n\t\t\t{ label: \"March\", value: 3 },\n\t\t\t{ label: \"April\", value: 4 },\n\t\t\t{ label: \"May\", value: 5 },\n\t\t\t{ label: \"June\", value: 6 },\n\t\t\t{ label: \"July\", value: 7 },\n\t\t\t{ label: \"August\", value: 8 },\n\t\t\t{ label: \"September\", value: 9 },\n\t\t\t{ label: \"October\", value: 10 },\n\t\t\t{ label: \"November\", value: 11 },\n\t\t\t{ label: \"December\", value: 12 },\n\t\t];\n\t}\n\n\tgetTypeList() {\n\t\treturn [\n\t\t\t{ label: \"Choose...\", value: \"\" },\n\t\t\t{ label: \"Revenue\", value: \"REVENUE\" },\n\t\t\t{ label: \"Expense\", value: \"EXPENSE\" },\n\t\t];\n\t}\n}\nexport default EntryService;\n"]},"metadata":{},"sourceType":"module"}