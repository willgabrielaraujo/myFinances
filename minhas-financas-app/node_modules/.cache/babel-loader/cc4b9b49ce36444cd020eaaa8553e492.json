{"ast":null,"code":"import ApiService from \"../ApiService\";\nimport ValidationException from \"../exception/ValidationException\";\n\nclass UserService extends ApiService {\n  constructor() {\n    super(\"/api/users\");\n  }\n\n  authenticate(credentials) {\n    return this.post(\"/authenticate\", credentials);\n  }\n\n  getBalance(id) {\n    return this.get(`/${id}/balance`);\n  }\n\n  save(user) {\n    return this.post(\"/\", user);\n  }\n\n  validate(user) {\n    const errors = [];\n\n    if (!user.name) {\n      errors.push(\"Name is required\");\n    }\n\n    if (!user.email) {\n      errors.push(\"Email is required\");\n    } else if (!user.email.match(/^[a-z0-9.]+@[a-z0-9]+\\.[a-z]/)) {\n      errors.push(\"Invalid email\");\n    }\n\n    if (!user.password) {\n      errors.push(\"Password is required\");\n    } else if (user.password !== user.passwordConfirm) {\n      errors.push(\"Password confirmation must match password\");\n    }\n\n    if (errors && errors.length > 0) {\n      throw new ValidationException(errors);\n    }\n  }\n\n}\n\nexport default UserService;","map":{"version":3,"sources":["/Users/gabrielaraujo/Dev/workspace/web/minhas-financas-app/src/app/services/UserService.js"],"names":["ApiService","ValidationException","UserService","constructor","authenticate","credentials","post","getBalance","id","get","save","user","validate","errors","name","push","email","match","password","passwordConfirm","length"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,eAAvB;AACA,OAAOC,mBAAP,MAAgC,kCAAhC;;AAEA,MAAMC,WAAN,SAA0BF,UAA1B,CAAqC;AACnCG,EAAAA,WAAW,GAAG;AACZ,UAAM,YAAN;AACD;;AAEDC,EAAAA,YAAY,CAACC,WAAD,EAAc;AACxB,WAAO,KAAKC,IAAL,CAAU,eAAV,EAA2BD,WAA3B,CAAP;AACD;;AAEDE,EAAAA,UAAU,CAACC,EAAD,EAAK;AACb,WAAO,KAAKC,GAAL,CAAU,IAAGD,EAAG,UAAhB,CAAP;AACD;;AAEDE,EAAAA,IAAI,CAACC,IAAD,EAAO;AACT,WAAO,KAAKL,IAAL,CAAU,GAAV,EAAeK,IAAf,CAAP;AACD;;AAEDC,EAAAA,QAAQ,CAACD,IAAD,EAAO;AACb,UAAME,MAAM,GAAG,EAAf;;AAEA,QAAI,CAACF,IAAI,CAACG,IAAV,EAAgB;AACdD,MAAAA,MAAM,CAACE,IAAP,CAAY,kBAAZ;AACD;;AAED,QAAI,CAACJ,IAAI,CAACK,KAAV,EAAiB;AACfH,MAAAA,MAAM,CAACE,IAAP,CAAY,mBAAZ;AACD,KAFD,MAEO,IAAI,CAACJ,IAAI,CAACK,KAAL,CAAWC,KAAX,CAAiB,8BAAjB,CAAL,EAAuD;AAC5DJ,MAAAA,MAAM,CAACE,IAAP,CAAY,eAAZ;AACD;;AAED,QAAI,CAACJ,IAAI,CAACO,QAAV,EAAoB;AAClBL,MAAAA,MAAM,CAACE,IAAP,CAAY,sBAAZ;AACD,KAFD,MAEO,IAAIJ,IAAI,CAACO,QAAL,KAAkBP,IAAI,CAACQ,eAA3B,EAA4C;AACjDN,MAAAA,MAAM,CAACE,IAAP,CAAY,2CAAZ;AACD;;AAED,QAAIF,MAAM,IAAIA,MAAM,CAACO,MAAP,GAAgB,CAA9B,EAAiC;AAC/B,YAAM,IAAInB,mBAAJ,CAAwBY,MAAxB,CAAN;AACD;AACF;;AAvCkC;;AA0CrC,eAAeX,WAAf","sourcesContent":["import ApiService from \"../ApiService\";\nimport ValidationException from \"../exception/ValidationException\";\n\nclass UserService extends ApiService {\n  constructor() {\n    super(\"/api/users\");\n  }\n\n  authenticate(credentials) {\n    return this.post(\"/authenticate\", credentials);\n  }\n\n  getBalance(id) {\n    return this.get(`/${id}/balance`);\n  }\n\n  save(user) {\n    return this.post(\"/\", user);\n  }\n\n  validate(user) {\n    const errors = [];\n\n    if (!user.name) {\n      errors.push(\"Name is required\");\n    }\n\n    if (!user.email) {\n      errors.push(\"Email is required\");\n    } else if (!user.email.match(/^[a-z0-9.]+@[a-z0-9]+\\.[a-z]/)) {\n      errors.push(\"Invalid email\");\n    }\n\n    if (!user.password) {\n      errors.push(\"Password is required\");\n    } else if (user.password !== user.passwordConfirm) {\n      errors.push(\"Password confirmation must match password\");\n    }\n\n    if (errors && errors.length > 0) {\n      throw new ValidationException(errors);\n    }\n  }\n}\n\nexport default UserService;\n"]},"metadata":{},"sourceType":"module"}